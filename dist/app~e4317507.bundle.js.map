{"version":3,"file":"app~e4317507.bundle.js","mappings":"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","sources":["webpack://movie-catalogue/./src/scripts/routes/routes.js","webpack://movie-catalogue/./src/scripts/routes/url-parser.js","webpack://movie-catalogue/./src/scripts/utils/drawer-initiator.js","webpack://movie-catalogue/./src/scripts/utils/footer-tools-initiator.js"],"sourcesContent":["import RestaurantList from '../views/pages/restaurant-list';\r\nimport Detail from '../views/pages/detail';\r\nimport Like from '../views/pages/like';\r\n\r\nconst routes = {\r\n  '/': RestaurantList, // default page\r\n  '/restaurant-list': RestaurantList,\r\n  '/detail/:id': Detail,\r\n  '/like': Like,\r\n};\r\n\r\nexport default routes;\r\n","const UrlParser = {\r\n  parseActiveUrlWithCombiner() {\r\n    const url = window.location.hash.slice(1).toLowerCase();\r\n    const splitedUrl = this._urlSplitter(url);\r\n    return this._urlCombiner(splitedUrl);\r\n  },\r\n\r\n  parseActiveUrlWithoutCombiner() {\r\n    const url = window.location.hash.slice(1).toLowerCase();\r\n    return this._urlSplitter(url);\r\n  },\r\n\r\n  _urlSplitter(url) {\r\n    const urlsSplits = url.split('/');\r\n    return {\r\n      resource: urlsSplits[1] || null,\r\n      id: urlsSplits[2] || null,\r\n      verb: urlsSplits[3] || null,\r\n    };\r\n  },\r\n\r\n  _urlCombiner(splitedUrl) {\r\n    return (\r\n      (splitedUrl.resource ? `/${splitedUrl.resource}` : '/')\r\n      + (splitedUrl.id ? '/:id' : '')\r\n      + (splitedUrl.verb ? `/${splitedUrl.verb}` : '')\r\n    );\r\n  },\r\n};\r\n\r\nexport default UrlParser;\r\n","const DrawerInitiator = {\r\n  init({ button, drawer, content }) {\r\n    button.addEventListener('click', (event) => {\r\n      this._toggleDrawer(event, drawer);\r\n    });\r\n\r\n    content.addEventListener('click', (event) => {\r\n      this._closeDrawer(event, drawer);\r\n    });\r\n  },\r\n\r\n  _toggleDrawer(event, drawer) {\r\n    event.stopPropagation();\r\n    drawer.classList.toggle('open');\r\n  },\r\n\r\n  _closeDrawer(event, drawer) {\r\n    event.stopPropagation();\r\n    drawer.classList.remove('open');\r\n  },\r\n};\r\n\r\nexport default DrawerInitiator;\r\n","/* eslint-disable no-alert */\r\nimport NotificationHelper from './notification-helper';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst FooterToolsInitiator = {\r\n  async init({ subscribeButton, unsubscribeButton }) {\r\n    this._subscribeButton = subscribeButton;\r\n    this._unsubscribeButton = unsubscribeButton;\r\n    this._registrationServiceWorker = null;\r\n\r\n    if ('serviceWorker' in navigator) {\r\n      this._registrationServiceWorker = await navigator.serviceWorker.getRegistration();\r\n    }\r\n\r\n    await this._initialListener();\r\n    await this._initialState();\r\n  },\r\n\r\n  async _initialListener() {\r\n    this._subscribeButton.addEventListener('click', (event) => {\r\n      this._subscribePushMessage(event);\r\n    });\r\n\r\n    this._unsubscribeButton.addEventListener('click', (event) => {\r\n      this._unsubscribePushMessage(event);\r\n    });\r\n  },\r\n\r\n  async _initialState() {\r\n    this._showSubscribeButton();\r\n  },\r\n\r\n  async _subscribePushMessage(event) {\r\n    event.stopPropagation();\r\n\r\n    if (await this._isCurrentSubscriptionAvailable()) {\r\n      window.alert('Already subscribe to push message');\r\n      return;\r\n    }\r\n\r\n    if (!(await this._isNotificationReady())) {\r\n      console.log(\"Notification isn't available\");\r\n      return;\r\n    }\r\n\r\n    console.log('_subscribePushMessage: Subscribing to push message...');\r\n    const pushSubscription = await this._registrationServiceWorker?.pushManager.subscribe(\r\n      this._generateSubscribeOptions(),\r\n    );\r\n\r\n    if (!pushSubscription) {\r\n      console.log('Failed to subscribe push message');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this._sendPostToServer(\r\n        CONFIG.PUSH_MSG_SUBSCRIBE_URL,\r\n        pushSubscription,\r\n      );\r\n      console.log('Push message has been subscribed');\r\n    } catch (err) {\r\n      console.error(\r\n        'Failed to store push notification data to server:',\r\n        err.message,\r\n      );\r\n\r\n      // Undo subscribing push notification\r\n      await pushSubscription?.unsubscribe();\r\n    }\r\n\r\n    this._showSubscribeButton();\r\n  },\r\n\r\n  async _unsubscribePushMessage(event) {\r\n    event.stopPropagation();\r\n\r\n    const pushSubscription = await this._registrationServiceWorker?.pushManager.getSubscription();\r\n    if (!pushSubscription) {\r\n      window.alert(\"Haven't subscribing to push message\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this._sendPostToServer(\r\n        CONFIG.PUSH_MSG_UNSUBSCRIBE_URL,\r\n        pushSubscription,\r\n      );\r\n\r\n      const isHasBeenUnsubscribed = await pushSubscription.unsubscribe();\r\n      console.log('isHasBeenUnsubscribed: ', isHasBeenUnsubscribed);\r\n      if (!isHasBeenUnsubscribed) {\r\n        console.log('Failed to unsubscribe push message');\r\n        await this._sendPostToServer(\r\n          CONFIG.PUSH_MSG_SUBSCRIBE_URL,\r\n          pushSubscription,\r\n        );\r\n        return;\r\n      }\r\n\r\n      console.log('Push message has been unsubscribed');\r\n    } catch (err) {\r\n      console.error(\r\n        'Failed to erase push notification data from server:',\r\n        err.message,\r\n      );\r\n    }\r\n\r\n    this._showSubscribeButton();\r\n  },\r\n\r\n  _urlB64ToUint8Array: (base64String) => {\r\n    // eslint-disable-next-line no-mixed-operators\r\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, '+')\r\n      .replace(/_/g, '/');\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    // eslint-disable-next-line no-plusplus\r\n    for (let i = 0; i < rawData.length; i++) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  },\r\n\r\n  _generateSubscribeOptions() {\r\n    return {\r\n      userVisibleOnly: true,\r\n      applicationServerKey: this._urlB64ToUint8Array(\r\n        CONFIG.PUSH_MSG_VAPID_PUBLIC_KEY,\r\n      ),\r\n    };\r\n  },\r\n\r\n  async _sendPostToServer(url, data) {\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    return response.json();\r\n  },\r\n\r\n  _isSubscribedToServerForHiddenSubscribeButton(state = false) {\r\n    if (state) {\r\n      this._subscribeButton.style.display = 'none';\r\n      this._unsubscribeButton.style.display = 'inline-block';\r\n    } else {\r\n      this._subscribeButton.style.display = 'inline-block';\r\n      this._unsubscribeButton.style.display = 'none';\r\n    }\r\n  },\r\n\r\n  async _isCurrentSubscriptionAvailable() {\r\n    const checkSubscription = await this._registrationServiceWorker?.pushManager.getSubscription();\r\n    return Boolean(checkSubscription);\r\n  },\r\n\r\n  async _isNotificationReady() {\r\n    if (!NotificationHelper._checkAvailability()) {\r\n      console.log('Notification not supported in this browser');\r\n      return false;\r\n    }\r\n\r\n    if (!NotificationHelper._checkPermission()) {\r\n      console.log('User did not granted the notification permission yet');\r\n      const status = await Notification.requestPermission();\r\n\r\n      if (status === 'denied') {\r\n        window.alert(\r\n          'Cannot subscribe to push message because the status of notification permission is denied',\r\n        );\r\n        return false;\r\n      }\r\n\r\n      if (status === 'default') {\r\n        window.alert(\r\n          'Cannot subscribe to push message because the status of notification permission is ignored',\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  async _showSubscribeButton() {\r\n    this._isSubscribedToServerForHiddenSubscribeButton(\r\n      await this._isCurrentSubscriptionAvailable(),\r\n    );\r\n  },\r\n};\r\n\r\nexport default FooterToolsInitiator;\r\n"],"names":["RestaurantList","Detail","Like","parseActiveUrlWithCombiner","url","window","location","hash","slice","toLowerCase","splitedUrl","this","_urlSplitter","_urlCombiner","parseActiveUrlWithoutCombiner","urlsSplits","split","resource","id","verb","init","button","drawer","content","addEventListener","event","_toggleDrawer","_closeDrawer","stopPropagation","classList","toggle","remove","i","subscribeButton","unsubscribeButton","_subscribeButton","_unsubscribeButton","_registrationServiceWorker","navigator","serviceWorker","getRegistration","_initialListener","_initialState","_subscribePushMessage","_unsubscribePushMessage","_showSubscribeButton","_isCurrentSubscriptionAvailable","alert","_isNotificationReady","console","log","pushManager","subscribe","_generateSubscribeOptions","pushSubscription","_sendPostToServer","CONFIG","error","message","unsubscribe","getSubscription","isHasBeenUnsubscribed","_urlB64ToUint8Array","base64String","base64","repeat","length","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","userVisibleOnly","applicationServerKey","data","fetch","method","headers","body","JSON","stringify","response","json","_isSubscribedToServerForHiddenSubscribeButton","style","display","checkSubscription","Boolean","NotificationHelper","Notification","requestPermission","status"],"sourceRoot":""}